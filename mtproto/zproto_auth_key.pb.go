// Code generated by protoc-gen-go. DO NOT EDIT.
// source: zproto_auth_key.proto

package mtproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type AuthKeyMetadata struct {
	Nonce       []byte `protobuf:"bytes,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	ServerNonce []byte `protobuf:"bytes,2,opt,name=server_nonce,json=serverNonce,proto3" json:"server_nonce,omitempty"`
	NewNonce    []byte `protobuf:"bytes,3,opt,name=new_nonce,json=newNonce,proto3" json:"new_nonce,omitempty"`
	A           []byte `protobuf:"bytes,4,opt,name=a,proto3" json:"a,omitempty"`
	P           []byte `protobuf:"bytes,5,opt,name=p,proto3" json:"p,omitempty"`
	AuthKeyId   int64  `protobuf:"varint,6,opt,name=auth_key_id,json=authKeyId" json:"auth_key_id,omitempty"`
	AuthKey     []byte `protobuf:"bytes,7,opt,name=auth_key,json=authKey,proto3" json:"auth_key,omitempty"`
}

func (m *AuthKeyMetadata) Reset()                    { *m = AuthKeyMetadata{} }
func (m *AuthKeyMetadata) String() string            { return proto.CompactTextString(m) }
func (*AuthKeyMetadata) ProtoMessage()               {}
func (*AuthKeyMetadata) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{0} }

func (m *AuthKeyMetadata) GetNonce() []byte {
	if m != nil {
		return m.Nonce
	}
	return nil
}

func (m *AuthKeyMetadata) GetServerNonce() []byte {
	if m != nil {
		return m.ServerNonce
	}
	return nil
}

func (m *AuthKeyMetadata) GetNewNonce() []byte {
	if m != nil {
		return m.NewNonce
	}
	return nil
}

func (m *AuthKeyMetadata) GetA() []byte {
	if m != nil {
		return m.A
	}
	return nil
}

func (m *AuthKeyMetadata) GetP() []byte {
	if m != nil {
		return m.P
	}
	return nil
}

func (m *AuthKeyMetadata) GetAuthKeyId() int64 {
	if m != nil {
		return m.AuthKeyId
	}
	return 0
}

func (m *AuthKeyMetadata) GetAuthKey() []byte {
	if m != nil {
		return m.AuthKey
	}
	return nil
}

type AuthKeyRequest struct {
	AuthKeyId int64 `protobuf:"varint,1,opt,name=auth_key_id,json=authKeyId" json:"auth_key_id,omitempty"`
}

func (m *AuthKeyRequest) Reset()                    { *m = AuthKeyRequest{} }
func (m *AuthKeyRequest) String() string            { return proto.CompactTextString(m) }
func (*AuthKeyRequest) ProtoMessage()               {}
func (*AuthKeyRequest) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{1} }

func (m *AuthKeyRequest) GetAuthKeyId() int64 {
	if m != nil {
		return m.AuthKeyId
	}
	return 0
}

type AuthKeyData struct {
	Result    int32  `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	AuthKeyId int64  `protobuf:"varint,2,opt,name=auth_key_id,json=authKeyId" json:"auth_key_id,omitempty"`
	AuthKey   []byte `protobuf:"bytes,3,opt,name=auth_key,json=authKey,proto3" json:"auth_key,omitempty"`
}

func (m *AuthKeyData) Reset()                    { *m = AuthKeyData{} }
func (m *AuthKeyData) String() string            { return proto.CompactTextString(m) }
func (*AuthKeyData) ProtoMessage()               {}
func (*AuthKeyData) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{2} }

func (m *AuthKeyData) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

func (m *AuthKeyData) GetAuthKeyId() int64 {
	if m != nil {
		return m.AuthKeyId
	}
	return 0
}

func (m *AuthKeyData) GetAuthKey() []byte {
	if m != nil {
		return m.AuthKey
	}
	return nil
}

// TODO(@benqi): remove to biz_auth service
type AuthKeyIdRequest struct {
	AuthKeyId int64 `protobuf:"varint,1,opt,name=auth_key_id,json=authKeyId" json:"auth_key_id,omitempty"`
}

func (m *AuthKeyIdRequest) Reset()                    { *m = AuthKeyIdRequest{} }
func (m *AuthKeyIdRequest) String() string            { return proto.CompactTextString(m) }
func (*AuthKeyIdRequest) ProtoMessage()               {}
func (*AuthKeyIdRequest) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{3} }

func (m *AuthKeyIdRequest) GetAuthKeyId() int64 {
	if m != nil {
		return m.AuthKeyId
	}
	return 0
}

type UserIdResponse struct {
	Result    int32 `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	AuthKeyId int64 `protobuf:"varint,2,opt,name=auth_key_id,json=authKeyId" json:"auth_key_id,omitempty"`
	UserId    int32 `protobuf:"varint,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *UserIdResponse) Reset()                    { *m = UserIdResponse{} }
func (m *UserIdResponse) String() string            { return proto.CompactTextString(m) }
func (*UserIdResponse) ProtoMessage()               {}
func (*UserIdResponse) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{4} }

func (m *UserIdResponse) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

func (m *UserIdResponse) GetAuthKeyId() int64 {
	if m != nil {
		return m.AuthKeyId
	}
	return 0
}

func (m *UserIdResponse) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func init() {
	proto.RegisterType((*AuthKeyMetadata)(nil), "mtproto.AuthKeyMetadata")
	proto.RegisterType((*AuthKeyRequest)(nil), "mtproto.AuthKeyRequest")
	proto.RegisterType((*AuthKeyData)(nil), "mtproto.AuthKeyData")
	proto.RegisterType((*AuthKeyIdRequest)(nil), "mtproto.AuthKeyIdRequest")
	proto.RegisterType((*UserIdResponse)(nil), "mtproto.UserIdResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ZRPCAuthKey service

type ZRPCAuthKeyClient interface {
	QueryAuthKey(ctx context.Context, in *AuthKeyRequest, opts ...grpc.CallOption) (*AuthKeyData, error)
	// TODO(@benqi): remove to biz_auth service
	QueryUserId(ctx context.Context, in *AuthKeyIdRequest, opts ...grpc.CallOption) (*UserIdResponse, error)
}

type zRPCAuthKeyClient struct {
	cc *grpc.ClientConn
}

func NewZRPCAuthKeyClient(cc *grpc.ClientConn) ZRPCAuthKeyClient {
	return &zRPCAuthKeyClient{cc}
}

func (c *zRPCAuthKeyClient) QueryAuthKey(ctx context.Context, in *AuthKeyRequest, opts ...grpc.CallOption) (*AuthKeyData, error) {
	out := new(AuthKeyData)
	err := grpc.Invoke(ctx, "/mtproto.ZRPCAuthKey/QueryAuthKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zRPCAuthKeyClient) QueryUserId(ctx context.Context, in *AuthKeyIdRequest, opts ...grpc.CallOption) (*UserIdResponse, error) {
	out := new(UserIdResponse)
	err := grpc.Invoke(ctx, "/mtproto.ZRPCAuthKey/QueryUserId", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ZRPCAuthKey service

type ZRPCAuthKeyServer interface {
	QueryAuthKey(context.Context, *AuthKeyRequest) (*AuthKeyData, error)
	// TODO(@benqi): remove to biz_auth service
	QueryUserId(context.Context, *AuthKeyIdRequest) (*UserIdResponse, error)
}

func RegisterZRPCAuthKeyServer(s *grpc.Server, srv ZRPCAuthKeyServer) {
	s.RegisterService(&_ZRPCAuthKey_serviceDesc, srv)
}

func _ZRPCAuthKey_QueryAuthKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZRPCAuthKeyServer).QueryAuthKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.ZRPCAuthKey/QueryAuthKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZRPCAuthKeyServer).QueryAuthKey(ctx, req.(*AuthKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZRPCAuthKey_QueryUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthKeyIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZRPCAuthKeyServer).QueryUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.ZRPCAuthKey/QueryUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZRPCAuthKeyServer).QueryUserId(ctx, req.(*AuthKeyIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ZRPCAuthKey_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.ZRPCAuthKey",
	HandlerType: (*ZRPCAuthKeyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryAuthKey",
			Handler:    _ZRPCAuthKey_QueryAuthKey_Handler,
		},
		{
			MethodName: "QueryUserId",
			Handler:    _ZRPCAuthKey_QueryUserId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zproto_auth_key.proto",
}

func init() { proto.RegisterFile("zproto_auth_key.proto", fileDescriptor10) }

var fileDescriptor10 = []byte{
	// 354 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0xcf, 0x4e, 0xc2, 0x40,
	0x10, 0xc6, 0xb3, 0x54, 0x28, 0x4c, 0x1b, 0xd4, 0x8a, 0x52, 0x30, 0x31, 0xc8, 0x89, 0x83, 0x69,
	0x0c, 0x9e, 0x3d, 0x80, 0x1e, 0x34, 0x46, 0x83, 0x4d, 0xbc, 0x70, 0xa9, 0x0b, 0x4c, 0x02, 0x11,
	0xda, 0xda, 0xdd, 0x95, 0xe0, 0x4b, 0xf8, 0x46, 0x3e, 0x9b, 0xd9, 0x3f, 0xd5, 0xd0, 0x83, 0x31,
	0x9e, 0xda, 0x6f, 0x7f, 0x33, 0xdf, 0x7e, 0xb3, 0x19, 0x38, 0x7c, 0x4f, 0xb3, 0x84, 0x27, 0x11,
	0x15, 0x7c, 0x1e, 0xbd, 0xe0, 0x26, 0x50, 0xd2, 0xb3, 0x57, 0x5c, 0xfd, 0x74, 0x3f, 0x09, 0xec,
	0x0e, 0x04, 0x9f, 0xdf, 0xe1, 0xe6, 0x1e, 0x39, 0x9d, 0x51, 0x4e, 0xbd, 0x06, 0x94, 0xe3, 0x24,
	0x9e, 0xa2, 0x4f, 0x3a, 0xa4, 0xe7, 0x86, 0x5a, 0x78, 0xa7, 0xe0, 0x32, 0xcc, 0xde, 0x30, 0x8b,
	0x34, 0x2c, 0x29, 0xe8, 0xe8, 0xb3, 0x07, 0x55, 0x72, 0x0c, 0xb5, 0x18, 0xd7, 0x86, 0x5b, 0x8a,
	0x57, 0x63, 0x5c, 0x6b, 0xe8, 0x02, 0xa1, 0xfe, 0x8e, 0x3a, 0x24, 0x54, 0xaa, 0xd4, 0x2f, 0x6b,
	0x95, 0x7a, 0x27, 0xe0, 0xe4, 0x01, 0xa3, 0xc5, 0xcc, 0xaf, 0x74, 0x48, 0xcf, 0x0a, 0x6b, 0x54,
	0xe7, 0xba, 0x9d, 0x79, 0x2d, 0xa8, 0xe6, 0xdc, 0xb7, 0x55, 0x93, 0x6d, 0x60, 0xf7, 0x1c, 0xea,
	0x26, 0x7f, 0x88, 0xaf, 0x02, 0x19, 0x2f, 0x9a, 0x91, 0x82, 0x59, 0xf7, 0x19, 0x1c, 0xd3, 0x71,
	0x2d, 0xa7, 0x3d, 0x82, 0x4a, 0x86, 0x4c, 0x2c, 0xb9, 0xaa, 0x2c, 0x87, 0x46, 0x15, 0x6d, 0x4a,
	0xbf, 0x65, 0xb2, 0xb6, 0x33, 0xf5, 0x61, 0x6f, 0x90, 0xd7, 0xfd, 0x35, 0x15, 0x85, 0xfa, 0x13,
	0xc3, 0x4c, 0x36, 0xb0, 0x34, 0x89, 0x19, 0xfe, 0x3b, 0x58, 0x13, 0x6c, 0xc1, 0x30, 0x93, 0xcc,
	0xd2, 0x8d, 0x42, 0x19, 0xf7, 0x3f, 0x08, 0x38, 0xe3, 0x70, 0x74, 0x65, 0xb2, 0x79, 0x97, 0xe0,
	0x3e, 0x0a, 0xcc, 0x36, 0xb9, 0x6e, 0x06, 0x66, 0x2b, 0x82, 0xed, 0x17, 0x6d, 0x37, 0x8a, 0x40,
	0x3d, 0xdc, 0x00, 0x1c, 0xd5, 0xae, 0x63, 0x7b, 0xad, 0x62, 0xd1, 0xf7, 0xec, 0xed, 0x1f, 0xe3,
	0xed, 0x11, 0x87, 0x67, 0x70, 0x30, 0x4d, 0x56, 0x41, 0x8c, 0x13, 0xb1, 0xa4, 0x8b, 0x55, 0xa0,
	0x97, 0x75, 0xb8, 0x3f, 0x1e, 0xc9, 0x6f, 0x98, 0x4e, 0xe5, 0x4e, 0xca, 0xcb, 0x6e, 0x4a, 0x23,
	0x32, 0xa9, 0x28, 0x7a, 0xf1, 0x15, 0x00, 0x00, 0xff, 0xff, 0x93, 0x56, 0x9f, 0x06, 0xd4, 0x02,
	0x00, 0x00,
}
